--SQL HOMEWORK
--2.1 SELECT part 1 - Select all records from the Employee table.
SELECT * FROM EMPLOYEE
/
--2.1 part 2 - Select all records from the Employee table where last name is King.
SELECT *
FROM EMPLOYEE
WHERE LASTNAME = 'King';
/
--2.1 part 3 - Select all records from the Employee table where first name is Andrew and REPORTSTO is NULL.
SELECT *
FROM EMPLOYEE
WHERE FIRSTNAME = 'Andrew'
AND REPORTSTO IS NULL;
/
--2.2 ORDER BY part 1 - Select all albums in Alburm table and sort result set in descending order by title.
SELECT *
FROM ALBUM 
ORDER BY TITLE DESC
/
--2.2 part 2 - Select first name from Customer and sort result set in ascending order by city
SELECT FIRSTNAME
FROM CUSTOMER
ORDER BY CITY ASC
/
--Attempted Version of 2.3 part 1
--INSERT INTO GENRE(GENREID, NAME)
--VALUES 
    --(26, 'Indie'),
    --(27, 'Smooth Jazz');
--/
--2.3 INSERT INTO part 1 - Insert two new records into Genre table
INSERT INTO GENRE(GENREID, NAME)
VALUES(26, 'Indie');
/
INSERT INTO GENRE(GENREID, NAME)
VALUES(27, 'Smooth Jazz');
/
--2.3 part 2 - Insert two new records into Employee table
INSERT INTO EMPLOYEE(EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
VALUES('9', 'Robertson', 'Matthew', 'IT Manager', '6', '01-JAN-91', '06-JUN-19', '555 Not-Really-Important Way', 'Oxford', 'AL', 'USA', '40503', '+1 (859) 586-2444', '+1 (444) 444-4444', 'matthew@gmail.com');
/
INSERT INTO EMPLOYEE(EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO, BIRTHDATE, HIREDATE, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
VALUES('10', 'Bottoms', 'Soggy', 'CEO', '1', '01-MAY-91', '06-FEB-00', '554 Not-Really-Important Way', 'Cambridge', 'AL', 'UK', 'CB1', '+1 (859) 586-2444', '+1 (444) 444-4444', 'soggy.bottoms@gmail.com');
/
--2.3 part 3 Insert two new records into Customer table
INSERT INTO CUSTOMER(CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
VALUES('60', 'Crazy', 'Goose', 'Apple Inc.', '1800 None-of-Your-Business Way', 'Chicago', 'AL', 'USA', '33441', '222-222-2222', '111-111-1111', 'cg@aol.com', '5')
/
INSERT INTO CUSTOMER(CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID)
VALUES('61', 'Not So Crazy', 'Geese', 'Orange Inc.', '1700 None-of-Your-Business Way', 'Atlanta', 'AL', 'USA', '33441', '221-222-2222', '112-111-1111', 'nscg@aol.com', '4')
/
--2.4 UPDATE part 1 - Update Aaron Mitchell in Customer table to Robert Walter
UPDATE CUSTOMER
SET FIRSTNAME = 'Robert' , LASTNAME = 'Walter'
WHERE CUSTOMERID = '32';
/
--2.4 part 2 - Update name of artist in the Artist table "Creedence Clearwater Revival" to "CCR"
UPDATE ARTIST
SET NAME = 'CCR'
WHERE ARTISTID = '76';
/
--2.5 LIKE - Select all invoices with a billing address like "T%" 
SELECT *
FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';
/
--2.6 BETWEEN part 1 - Select all invoices that have a total between 15 and 50
SELECT *
FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;
/
--2.6 part 2 - Select all employees hired between 1st of June 2003 and 1st of March 2004
SELECT *
FROM EMPLOYEE
WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';
/
--2.7 DELETE - Delete a record in Customer table where the name is Robert Walter (There may be constraints that rely on this, 
--find out how to resolve them).
ALTER TABLE INVOICE 
    ADD CONSTRAINT FK_INVOICECUSTOMERID
    FOREIGN KEY (CUSTOMERID)
    REFERENCES CUSTOMER (CUSTOMERID)
    ON DELETE CASCADE;
    
ALTER TABLE INVOICELINE
    DROP CONSTRAINT FK_INVOICELINEINVOICEID;
    
ALTER TABLE INVOICELINE 
    ADD CONSTRAINT FK_INVOICELINEINVOICEID;
    FOREIGN KEY (INVOICEID)
    REFERENCES INVOICE (INVOICEID)
    ON DELETE CASCADE;
    
DELETE FROM CUSTOMER
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';
COMMIT;
/

--3.1 System Defined Functions part 1 - Create a function that returns the current time. 
SELECT CURRENT_DATE FROM DUAL 
/
-- 3.1 part 2 – create a function that returns the length of name in MEDIATYPE table
SELECT LENGTH(NAME) AS LENGTHOFNAME
FROM MEDIATYPE
WHERE MEDIATYPEID = 1; 
/
--3.2 System Defined Aggregate Functions part 1 - Create a function that returns the average total of all invoices 
SELECT AVG(ALL TOTAL)
FROM INVOICE;
/
--3.2 part 2 Create a function that returns the most expensive track
SELECT MAX(UNITPRICE) 
AS "MOST EXPENSIVE TRACK"
FROM TRACK;
/
--3.3 User Defined Scalar Functions – Create a function that returns the average price of invoice line 
--items in the invoiceline table
SELECT AVG(ALL UNITPRICE)
FROM INVOICELINE;
/
--3.4 User Defined Table Valued Functions – Create a function that returns all employees who are born after 1968.
SELECT * FROM EMPLOYEE
WHERE BIRTHDATE >= DATE '1969-01-01';
/
--4.1 Basic Stored Procedure – Create a stored procedure that selects the first and last names of all the employees.
 CREATE OR REPLACE PROCEDURE EMPLOYEE_FIRSTLASTNAME
 (FIRSTNAME OUT VARCHAR2, LASTNAME OUT VARCHAR2)
AS
BEGIN
    SELECT FIRSTNAME, LASTNAME 
    INTO FIRSTNAME, LASTNAME 
    FROM EMPLOYEE;
    END;
/
--4.2 Stored Procedure Input Parameters part 1 – Create a stored procedure that updates the personal information of an employee.
SELECT * FROM EMPLOYEE;
CREATE OR REPLACE PROCEDURE EMPLOYEE_UPDATEPERINFO
(
FIRSTNAME1 IN VARCHAR2,
LASTNAME1 IN VARCHAR2,
BIRTHDATE1 IN DATE,
EMPLOYEEID1 IN NUMBER
)
AS
BEGIN
    UPDATE EMPLOYEE
    SET
    FIRSTNAME = FIRSTNAME1,
    LASTNAME = LASTNAME1,
    BIRTHDATE = BIRTHDATE1
    WHERE
    EMPLOYEEID = EMPLOYEEID1;
    END; 
/
--4.2 part 2 – Create a stored procedure that returns the managers of an employee.
SELECT * FROM EMPLOYEE;
CREATE OR REPLACE PROCEDURE EMPLOYEE_REPORTSTO
(
EMPLOYEE_ID IN NUMBER,
MANAGERID OUT NUMBER
)
AS
BEGIN
    SELECT REPORTSTO
    INTO MANAGERID
    FROM
    EMPLOYEE
    WHERE EMPLOYEE_ID = EMPLOYEEID;
    END;
/
--4.3 Stored Procedure Output Parameters – Create a stored procedure that returns the name and company of a customer.
SELECT * FROM CUSTOMER;
CREATE OR REPLACE PROCEDURE CUSTOMER_NAMEANDCOMPANY
(
CUSTOMERID2 IN NUMBER,
FIRSTNAME2 OUT VARCHAR2,
LASTNAME2 OUT VARCHAR2,
COMPANY2 OUT VARCHAR2
)
AS
BEGIN
    SELECT FIRSTNAME, LASTNAME, COMPANY
    INTO FIRSTNAME2, LASTNAME2, COMPANY2
    FROM CUSTOMER
    WHERE CUSTOMERID = CUSTOMERID2;
    END;
/
--5.0 Transactions – Create a transaction that given a invoiceId will delete that invoice (There may be constraints that
--rely on this, find out how to resolve them).
 CREATE OR REPLACE PROCEDURE DELETE_INVOICE_GIVEN_INVOICEID
 (INVOICEID2 IN NUMBER)
 AS
 BEGIN
 DELETE
 FROM INVOICE
 WHERE INVOICEID = INVOICEID2;
 COMMIT;
 END;
 /
--6.1 AFTER/FOR part 1 - Create an after insert trigger on the employee table fired after a new record is inserted into the table.
CREATE OR REPLACE TRIGGER  AFTER_INSERT_TRIGGER AFTER INSERT ON EMPLOYEE
FOR EACH ROW  
BEGIN
UPDATE CUSTOMER
SET FIRSTNAME = 'Michael', LASTNAME = 'Jackson'
WHERE (FIRSTNAME = 'Mark' AND LASTNAME = 'Philips');
END;
/
--6.1 part 2 – Create an after update trigger on the album table that fires after a row is inserted in the table
CREATE OR REPLACE TRIGGER AFTER_UPDATE_TRIGGER AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
UPDATE ARTIST
SET NAME = 'Led Zepplin'
WHERE NAME = 'Buddy Guy';
END;
/
--6.1 part 3 – Create an after delete trigger on the customer table that fires after a row is deleted from the table.
CREATE OR REPLACE TRIGGER AFTER_DELETE_TRIGGER AFTER DELETE ON CUSTOMER
FOR EACH ROW  
BEGIN 
DBMS_OUTPUT.PUT_LINE('row deleted');
END;
/
--7.1 INNER – Create an inner join that joins customers and orders and specifies the name of the customer and the invoiceId.
SELECT  CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID
   FROM CUSTOMER
   INNER JOIN INVOICE
   ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;
/
--7.2 OUTER – Create an outer join that joins the customer and invoice table, specifying the CustomerId, firstname, lastname, invoiceId, and total.
SELECT  CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL
   FROM CUSTOMER
   FULL OUTER JOIN INVOICE
   ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;
/
--7.3 RIGHT – Create a right join that joins album and artist specifying artist name and title.
SELECT  ARTIST."NAME", ALBUM.TITLE
   FROM ALBUM
   RIGHT OUTER JOIN ARTIST
   ON ALBUM.ARTISTID = ARTIST.ARTISTID;
/
--7.4 CROSS – Create a cross join that joins album and artist and sorts by artist name in ascending order.
SELECT  ARTIST."NAME"
   FROM ALBUM
   CROSS JOIN ARTIST
   ORDER BY ARTIST."NAME";
/
--7.5 SELF – Perform a self-join on the employee table, joining on the reportsto column.
SELECT  *
   FROM EMPLOYEE A, EMPLOYEE B
   WHERE A.REPORTSTO = B.REPORTSTO;
/